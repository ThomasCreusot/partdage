# Every CircleCI config.yml starts with the version key. This key is used to issue warnings about
# breaking changes.
version: 2.1

jobs:
  #Demo from documentation
  #build:
  #  docker:
  #    - image: alpine:3.15
  #      auth:
  #        username: mydockerhub-user
  #        password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
  #  steps:
  #    - run:
  #        name: The First Step
  #        command: |
  #          echo 'Hello World!'
  #          echo 'This is the delivery pipeline'

  build_and_test:
    docker:
      # initial : 
      # - image: circleci/python:3.10  # version on my computer + as https://pypi.org/project/asgiref/  asgiref requires Python 3.7 or higher.

      # https://discuss.circleci.com/t/setting-up-test-database-credentials-with-circleci-with-django-is-failing/42396
      # https://circleci.com/developer/images/image/cimg/postgres
      - image: circleci/python:3.10
        environment:
          DATABASE_NAME: circle_test
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
          DATABASE_USER: root
          DATABASE_PASSWORD: 'aze'
          DATABASE_PORT: 5432
          DATABASE_HOST: localhost 
      - image: circleci/postgres:9.6.2
        environment:
          DATABASE_NAME: circle_test
          DATABASE_USER: root
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
          DATABASE_PASSWORD: 'aze'
          DATABASE_PORT: 5432
          DATABASE_HOST: localhost 

    #could not bind IPv4 socket: Address already in use
    #PostgreSQL 11 or later is required (found 9.602)


    steps:
      # https://circleci.com/blog/continuous-integration-for-django-projects/
      - checkout  # This command fetches your source code over SSH to the configured path (the working directory, by default).
      - restore_cache:  # This command restores a previously saved cache
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Virtual environment creation and requirements installation
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
      - save_cache:  # This command generates and saves a cache of a file, multiple files, or folders. In our case, we save a cache of the installed Python packages obtained after running pip install â€¦.
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      # pytest -s --no-migrations --ignore=env 
      - run:
          name: Running tests
          command: |
            . venv/bin/activate
             
      - run:
          name: Running linter
          command: |
            . venv/bin/activate
            flake8 --max-line-length 119 --exclude=env,venv,./lettings/migrations,./oc_lettings_site/migrations,./profiles/migrations
      - store_artifacts:  # This command stores logs, binaries, etc. so that they are accessible by the app in later runs.
          path: test-reports/
          destination: python_app
      # https://circleci.com/docs/language-python/ ; https://circleci.com/docs/workspaces/
      #- persist_to_workspace:
      #    root: ~/project
      #    paths:
      #      - .

workflows:
  build_test_deploy:
    jobs:
      - build_and_test